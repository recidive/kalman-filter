/** Declaration file generated by dts-gen */

type DynamicConfig = {
  observation: object | number | string | null
  dynamic: object | string | null
}

export class KalmanFilter {
  constructor(DynamicConfig)

  asymptoticGain(tolerance: number): number[][]

  asymptoticStateCovariance(
    limitIterations: number,
    tolerance: number,
  ): number[][]

  correct(options: { predicted: number[]; observation: number[] }): State

  filter(options: { previousCorrected: number[]; index: number }): number[]

  filterAll(observations: number[][]): number[][]
}

type StateOptions = {
  mean: number
  covariance: number[][]
  index: number[][]
}

export class State {
  constructor(StateOptions)

  bhattacharyya(otherState: State): number

  check(options: { dimension: number; title: string; eigen: boolean }): void

  detailedMahalanobis(options: {
    kf: KalmanFilter
    observation: number[]
    obsIndexes: number[]
  }): { value: number }

  mahalanobis(options: {
    kf: KalmanFilter
    observation: number[]
    obsIndexes: number[]
  }): number

  obsBhattacharyya(options: {
    kf: KalmanFilter
    observation: number[]
    obsIndexes: number[]
  }): number

  rawDetailedMahalanobis(point: number[]): { value: number }

  subState(obsIndexes: number[]): State

  static check(
    state: State,
    options: { dimension: number; title: string; eigen: boolean },
  ): void

  static matMul(options: { state: State; matrix: number[][] }): State
}

// export function buildDynamic(dynamic: any, observation: any): any

// export function buildObservation(observation: any): any

// export function checkCovariance({ covariance, eigen = false }: any): void

// export function correlationToCovariance({ correlation, variance }: any): any

// export function covarianceToCorrelation(covariance: any): any

// export function getCovariance({ measures, averages }: any): any

// export function registerDynamic(name: any, fn: any): void

// export function registerObservation(name: any, fn: any): void

// export namespace linalgebra {
//   function add(args: any): any

//   function diag(mat: any): any

//   function identity(stateSize: any): any

//   function invert(m: any): any

//   function sub(args: any): any

//   function sum(array: any): any

//   function trace(array: any): any

//   function transpose(array: any): any

//   function zeros(rows: any, cols: any): any
// }
